---
import Layout from '../layouts/Layout.astro';
import '../styles/home.css';
import Button from '../components/Button.astro';
import { ThemeToggle } from '../components/ThemeToggle/ThemeToggle';
import { FeatureCard } from '../components/FeatureCard';

const features = [
  {
    id: 'modern-stack',
    icon: '🚀',
    title: 'Modern Stack',
    description: 'Astro 5, React 19, TypeScript. Fast, efficient, and type-safe development.',
    details: `This template utilizes a cutting-edge stack for building high-performance, scalable, and maintainable web applications.

Astro (v5+):
• Static Site Generation with Islands Architecture
• Zero JS by default, React islands when needed
• Built-in optimizations and performance

React (v19):
• Built-in Document Metadata, Actions, and enhanced Suspense
• Used only for interactive components (islands)
• Flexible server integration when you need dynamic UI

TypeScript:
• Full type safety across the entire application
• Enhanced developer experience with IntelliSense
• Compile-time error detection`,
  },
  {
    id: 'styling-freedom',
    icon: '🎨',
    title: 'Styling Freedom',
    description: 'Styling agnostic! Choose Tailwind, CSS Modules, Emotion, or your favorite solution.',
    details: `This template does not impose a specific styling library, giving you the flexibility to integrate the solution that best fits your project needs and team expertise.

Flexible Options:
• Scoped CSS: Built-in Astro scoped styling
• CSS Modules: Component-scoped CSS with classes
• Tailwind CSS: Utility-first CSS framework
• Styled Components: CSS-in-JS with React islands
• SCSS/Sass: Enhanced CSS with variables and mixins`,
  },
  {
    id: 'dev-tools',
    icon: '🛠️',
    title: 'Dev Tools Ready',
    description: 'ESLint, Prettier, Husky hooks, and Vitest testing pre-configured for quality code.',
    details: `Automated linting, formatting, and pre-commit/pre-push checks ensure code consistency and quality. A solid testing foundation with Vitest and React Testing Library is ready for you to build upon.

Code Quality Tools:
• ESLint: Linting with Astro-specific rules
• Prettier: Code formatting with Astro support
• Husky: Git hooks for quality gates
• Vitest: Fast unit testing framework
• TypeScript: Compile-time type checking`,
  },
  {
    id: 'responsive-design',
    icon: '📱',
    title: 'Responsive Design',
    description: 'Built with a responsive layout in mind. Looks great on all devices.',
    details: `The foundational layout uses modern CSS techniques that adapt to various screen sizes. The provided example components and page structure serve as a starting point for building fully responsive user interfaces.

Responsive Features:
• Mobile-First: Designed for mobile, enhanced for desktop
• Flexible Grid: CSS Grid and Flexbox layouts
• Breakpoint System: Consistent responsive breakpoints
• Touch Friendly: Optimized for touch interactions`,
  },
];

// Split features into two columns
const column1Features = features.filter((_, index) => index % 2 === 0);
const column2Features = features.filter((_, index) => index % 2 === 1);
---

<Layout title="Astro Starter Template">
  <div class="container">
    <div class="theme-toggle-container">
      <ThemeToggle client:load />
    </div>

    <main class="page-main">
      <section class="hero-section">
        <h1 class="title">Spark Your Next Creation! ✨</h1>
        <p class="subtitle">
          An Astro & TypeScript template designed for rapid development and learning industry best practices.
        </p>
        <div class="cta-buttons">
          <Button variant="primary" size="large" href="https://docs.astro.build"> Explore Astro Docs </Button>
        </div>
      </section>

      <section class="features-container">
        <div class="feature-column">
          {
            column1Features.map((feature) => (
              <FeatureCard
                key={feature.id}
                id={feature.id}
                icon={feature.icon}
                title={feature.title}
                description={feature.description}
                details={feature.details}
                client:load
              />
            ))
          }
        </div>
        <div class="feature-column">
          {
            column2Features.map((feature) => (
              <FeatureCard
                key={feature.id}
                id={feature.id}
                icon={feature.icon}
                title={feature.title}
                description={feature.description}
                details={feature.details}
                client:load
              />
            ))
          }
        </div>
      </section>
    </main>

    <footer class="footer">
      <p>This template is a launchpad for your amazing projects. Happy coding!</p>
    </footer>
  </div>
</Layout>
